1) предварительно разбил интерфейс для хранилища клиента на 4 шт(в соответствии с количеством хранимых типов)
/client/storage/repository

Ваш комментарий:
"- interface storage получился очень большой. Обычно для каждого отдельного типа создается свой собственный repository/storage и используется там где нужно.
Подводить все под один репозиторий == очень сильно раздувается структура. https://www.youtube.com/watch?v=eYHCCht8eX4 - хорошее видео на этот счет."


Но пока не понимаю как это можно применить конкретно в моем решении.
У меня клиент (структура) хранит Storage и transport
Т.е. все методы берут их оттуда, поэтому я и сделал его таким большим
Возможно, вообще не было особого смысла делать интерфейс к хранилищам т.к. задание не подразумевает вариативность методов храниения

ЭТО РАЗМЫШЛЕНИЯ. Обсудим их на 1-1

2) Вы попросили сократить код клиента.
/client/transport/

"- очень громоздкий получился клиент. Здесь можно подумать как написать проще/чище"

Наверное, количества методов можно сократить и попытаться часть логики вытащить на уровень выше.
Но я и так попытался оставить в транспорте только формирование запросов и их отправку.
Логика работы с результатами запросов и логика формирования отправляемых данных вынесены за пределы transport.
Только если Upload...

Если я не понял проблемы, то отпишите в комментарии или обсудим на 1-1

P.S. Прошу прощения за константы в main.go файлах. Забыл убрать после отладки